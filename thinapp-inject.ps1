$DirRoot = $PSScriptRoot
$DirTemp = Join-Path $DirRoot -ChildPath 'tmp'

$DirNew = Join-Path $DirTemp -ChildPath 'new'
$DirOld = Join-Path $DirTemp -ChildPath 'old'

# TODO: Make these configurable
$DirBin = Join-Path $DirRoot -ChildPath 'bin'
$DirSand = Join-Path $DirRoot -ChildPath 'test\build\Data'

# Meant for subprocess call
$BinVftool = Join-Path $DirBin -ChildPath 'vftool.exe'
$BinVregtool = Join-Path $DirBin -ChildPath 'vregtool.exe'

# Original file used by the app, plus a staging one which will replace it
$TvrOriginal = Join-Path $DirSand -ChildPath 'Registry.rw.tvr'
$TvrCombined = Join-Path $DirTemp -ChildPath 'Combined.rw.tvr'

$TvrBackupTemplate = Join-Path $DirSand -ChildPath 'Registry.rw.tvr.bak'

# Temporary working files, for output, etc.
$TvrOld = Join-Path $DirTemp -ChildPath 'old.tvr'
$TvrNew = Join-Path $DirTemp -ChildPath 'new.tvr'

# Delete these files to avoid "Corruption detected" errors
# I think these are triggered by .transact specifically
# See `DisableTransactionRegistry` in Package.ini
$Files = @(
    (Join-Path $DirSand -ChildPath 'Registry.rw.tvr.lck')
    (Join-Path $DirSand -ChildPath 'Registry.rw.tvr.transact')
    (Join-Path $DirSand -ChildPath 'Registry.tlog')
    (Join-Path $DirSand -ChildPath 'Registry.tlog.cache')
)

$Files | ForEach-Object {
    if (Test-Path $_) {
        # TODO: Test for file in use?
        Remove-Item -Path $_
        Write-Output ('Removed file: ' + $_)
    } else {
        Write-Output ('Nothing to remove: ' + $_)
    }
}

# Remove the tmp directory if it exists
if (Test-Path $DirTemp) {
    Remove-Item -Recurse -Force -Path $DirTemp
    Write-Output ('Removed directory: ' + $DirTemp)
}

# Create temporary directories, if they don't exist yet
@(($DirTemp), ($DirNew), ($DirOld)) | ForEach-Object {
    if (!(Test-Path -PathType Container $_)) {
        New-Item -ItemType Directory -Force -Path $_ | Out-Null
        Write-Output ('Created directory: ' + $_)
    }
}

# Create Package.ini in directories we'll be processing
# Required by vftool and vregtool
# We need to put one in root for ListFiles to work..?
# TODO: Make the version configurable, or extract it from the application..?
# 54 00 68 00 69 00 6E 00 41 00 70 00 70 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00
# ...then read until the next 00 00
# foobar.exe -thinstallversion
@(($DirSand), ($DirTemp), ($DirNew), ($DirOld), ([System.IO.path]::GetPathRoot($DirRoot))) | ForEach-Object {
    $fpath = Join-Path $_ -ChildPath 'Package.ini'
    $value = @(
        ('[BuildOptions]')
        ('CapturedUsingVersion=5.2.1-3655846')
    )

    # Little-endian UTF-16 Unicode text, with CRLF, CR line terminators
    $value | Out-File -FilePath $fpath -Encoding Unicode -Force

    Write-Output ('Created file: ' + $fpath)
}

# Copy the original tvr to tmp/old.tvr
Copy-Item -Path $TvrOriginal -Destination $TvrOld

# Generate a new tvr file, based on current sandbox state
& $BinVftool "$TvrNew" 'ImportDir' "$DirSand"

# Delete the `thinstall` key from the new tvr. This cascades to all subkeys
& $BinVregtool "$TvrNew" 'DelSubkey' "HKEY_LOCAL_MACHINE\FS\%ProgramFilesDir%\ThinstallPlugins" "-NoMark"

# Extract the virtual filesystem keys from both tvr's
$KeyBase = 'HKEY_LOCAL_MACHINE\FS'
& $BinVregtool "$TvrOld" 'ExportTxt' "$DirOld" "$KeyBase"
& $BinVregtool "$TvrNew" 'ExportTxt' "$DirNew" "$KeyBase"

# These will be generated by the vregtool calls, assuming normal key_base
$TxtOld = Join-Path $DirOld -ChildPath 'HKEY_LOCAL_MACHINE.txt'
$TxtNew = Join-Path $DirNew -ChildPath 'HKEY_LOCAL_MACHINE.txt'

# Read the generated HKEY_LOCAL_MACHINE.txt into arrays
# Note that these files are UTF-16 w/ BOM (LE)
# TODO: Check if this file exists?
$DataOld = Get-Content -Path $TxtOld
$DataNew = Get-Content -Path $TxtNew

$DataNew = $DataNew | ForEach-Object { $i = 0 } {

    # We reached the start of a new entry, so let's do a look-ahead
    if ($_.StartsWith('isolation_')) {

        # It seems that the 5th byte determines if it's a directory
        for ($j = $i+1; $j -lt $DataNew.Length; $j++) {
            if ($DataNew[$j].StartsWith('  REG_BINARY=')) {
                $isDir = $DataNew[$j][27] -eq '1'
                break
            }
            if ($DataNew[$j].StartsWith('isolation_')) {
                $isDir = $true
                break
            }
        }

        if ($isDir) {
            # Redirects all writes to the sandbox
            $_ = $_ -Replace '^isolation_.+? ', 'isolation_writecopy '
        } else {
            # Doing this for files allows us to override files present inside the packaged filesystem
            $_ = $_ -Replace '^isolation_.+? ', 'isolation_sb_only '
        }

    }

    if ($_.StartsWith('  REG_BINARY=')) {

        # trims everything after col 122
        # This may contain checksum info, etc.
        $_ = $_.SubString(0,121)

        # replaces #00 w/ #01
        # This may indicate whether the file came from a sandbox
        [char[]]$char = $_
        $char[15] = '1'
        $_ = [string]::new($char)

    }

    $i++

    $_
}

# Do some more steps to cleanup ThinApp cruft...
$i = [array]::IndexOf($DataNew, 'isolation_writecopy HKEY_LOCAL_MACHINE\FS\%ProgramFilesDir%')

if ($i -gt -1) {

    # This only works because we ran `DelSubkey` earlier
    $isLast = ( $DataNew[($i+1)..$DataNew.Length] | Where-Object { $_.StartsWith('isolation') } ).Length -lt 1

    if ($isLast) {

        $DataNew = $DataNew[0..($i-1)]

    } else {

        # If it's not the last item, then something else is in ProgramFiles
        # Remove Value/REG_SZ pairs if they point at 'ThinstallPlugins'

        # Find the next 'isolation' item
        for ($j=($i+1); $j -lt $DataNew.Length; $j++) {
            if ($DataNew[$j].StartsWith('isolation')) {
                break
            }
        }

        # For the parts between $i and $j, build array sans these pairs
        $temp = @()

        for ($k=$i; $k -lt $j; $k++) {
            if ($DataNew[$k].StartsWith('  Value')) {
                if ($DataNew[$k+1] -eq '  REG_SZ=ThinstallPlugins#00') {
                    $k++
                    continue
                }
            }
            $temp += $DataNew[$k]
        }

        # Combine the arrays, using our temp array w/ skips
        $DataNew = $DataNew[0..($i-1)] + $temp + $DataNew[$j..$DataNew.Length]

    }
}

# Go through $DataNew and compare with $DataOld
# Remove lines from that have only "empty" Value/REG_BINARY pairs, but aren't as such in old
$temp = @()
for ($i=0; $i -lt $DataNew.Length; $i++) {
    $temp += $DataNew[$i]
    if ($DataNew[$i].StartsWith('isolation')) {
        $item = $DataNew[$i] -Replace '^isolation_.+ (.+)$', '$1'
        $isInOld = $DataOld | Where-Object { $_.EndsWith($item) }
        if (!($isInOld -eq $null)) {
            $j = [array]::IndexOf($DataOld, $isInOld)
            if ($DataOld[($j+1)].Length -eq 0) {
                if ( $DataNew[($i+2)] -eq '  REG_BINARY=#01#00#00#00#01#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00#00') {
                    $i++
                    $i++
                }
            }
        }
    }
}

$DataNew = $temp

# Ensure there's only two trailing newlines
for ($i = $DataNew.Length; $i -gt 0; $i--) {
    if ($DataNew[$i].Length -lt 1) {
        $DataNew = $DataNew[0..($i-1)]
    } else {
        break
    }
}

$DataNew += ''

# Write the edited data to the reg file
$DataNew | Out-File -FilePath (Join-Path $DirNew -ChildPath 'HKEY_LOCAL_MACHINE.txt') -Encoding Unicode -Force

# Remove all filesystem data from the old tvr
& $BinVregtool "$TvrOld" 'DelSubkey' "$KeyBase" "-NoMark"

#
& $BinVregtool "$TvrOld" 'ImportDir' "$DirNew"

# Backup and replace the current tvr file
$i = 0
do {
    $TvrBackup = $TvrBackupTemplate + $i
    $i++
} until (!(Test-Path $TvrBackup))

Copy-Item -Path $TvrOriginal -Destination $TvrBackup
Copy-Item -Path $TvrOld -Destination $TvrOriginal

# Cleanup all the Package.ini we created...
@(($DirSand), ($DirTemp), ($DirNew), ($DirOld), ([System.IO.path]::GetPathRoot($DirRoot))) | ForEach-Object {
    $fpath = Join-Path $_ -ChildPath 'Package.ini'
    Remove-Item -Path $fpath
    Write-Output ('Removed file: ' + $fpath)
}

# Remove the temp directory
Remove-Item -Recurse -Force -Path $DirTemp
